#version 450

#include "../../resources/shaders/pbr.glsl"
#include "cubeSample.glsl"
#include "importanceSampleGGX.glsl"

layout(local_size_x = 16, local_size_y = 16) in;
layout(binding = 0) uniform samplerCube environmentMap;
layout(binding = 1, rgba16f) writeonly uniform imageCube prefilteredMap;
layout(push_constant) uniform Params {
    vec2 mipmapSize;
    float roughness;
} constants;

const vec2 cubemapSize = vec2(1024.0, 1024.0);
const float originalSamples = cubemapSize.x * cubemapSize.y;
const uint totalSamples = 1024u;

// importance sampling GGX NDF 
vec3 importanceSampleGGX(vec2 Xi, vec3 N, float roughness);

void main()
{	
	ivec3 cubeCoord = ivec3(gl_GlobalInvocationID);
    vec3 worldPos = cubeCoordToWorld(cubeCoord, constants.mipmapSize);
    // tagent space from origin point
    vec3 normal = normalize(worldPos);
    // assume view direction always equal to outgoing direction
    vec3 R = normal;
    vec3 V = normal;

    float roughness = max(constants.roughness, 0.04);
    float totalWeight = 0.0;   
    vec3 prefilteredColor = vec3(0.0);     
    for(uint i = 0u; i < totalSamples; ++i)
    {
        // generate sample vector towards the alignment of the specular lobe
        vec2 Xi = hammersleySequence(i, totalSamples);
        vec3 H = importanceSampleGGX(Xi, normal, roughness);
        vec3 L = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(dot(normal, L), 0.0);
        if(NdotL > 0.0)
        {
            float NdotH = max(dot(normal, H), 0.0);
            float HdotV = max(dot(H, V), 0.0);
            // sample from the environment's mip level based on roughness/pdf
            float D = d_ggx(NdotH, roughness);
            float pdf = D * NdotH / (4.0 * HdotV) + 0.0001; 

            float saTexel  = 4.0 * PI / (6.0 * originalSamples);
            float saSample = 1.0 / (totalSamples * pdf + 0.0001);
            float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel); 

            prefilteredColor += textureLod(environmentMap, L, mipLevel).rgb * NdotL;
            totalWeight += NdotL;
        }
    }
    prefilteredColor = prefilteredColor / totalWeight;

    imageStore(prefilteredMap, cubeCoord, vec4(prefilteredColor, 1.0));
}
