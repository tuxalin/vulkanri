#version 450

layout(local_size_x = 16, local_size_y = 16) in;
layout(binding = 0, rgba8) uniform readonly imageCube environmentMap;
layout(binding = 1, rgba32f) writeonly uniform imageCube irradianceMap;

const float PI = 3.1415926535897932384626433832795;
const float TWO_PI = PI * 2.0;
const float HALF_PI = PI * 0.5;

const float sampleDelta = 0.025;
const float totalSamples = (TWO_PI / sampleDelta) * (HALF_PI / sampleDelta); 
const float invTotalSamples = 1.0 / totalSamples;
const vec2 cubemapSize = vec2(1024.0, 1024.0);

vec3 cubeCoordToWorld(ivec3 cubeCoord)
{
	vec2 texCoord = vec2(cubeCoord.xy) / cubemapSize;
	texCoord = texCoord  * 2.0 - 1.0; // -1..1
	switch(cubeCoord.z)
	{
    	case 0: return vec3(1.0, -texCoord.yx);
    	case 1: return vec3(-1.0, -texCoord.y, texCoord.x);
    	case 2: return vec3(texCoord.x, 1.0, texCoord.y);
    	case 3: return vec3(texCoord.x, -1.0, -texCoord.y);
		case 4: return vec3(texCoord.x, -texCoord.y, 1.0);
    	case 5: return vec3(-texCoord.xy, -1.0);
    }

    return vec3(0.0);
}

float max3(vec3 v) 
{
  return max(max(v.x, v.y), v.z);
}

ivec3 texCoordToCube(vec3 texCoord)
{
	vec3 abst = abs(texCoord);
	texCoord /= max3(abst);

	float cubeFace;
	vec2 uvCoord;
	if (abst.x > abst.y && abst.x > abst.z) 
	{
		// x major
		float negx = step(texCoord.x, 0.0);
		uvCoord = mix(-texCoord.zy, vec2(texCoord.z, -texCoord.y), negx);
		cubeFace = negx;
	} 
	else if (abst.y > abst.z) 
	{
		// y major
	    float negy = step(texCoord.y, 0.0);
	    uvCoord = mix(texCoord.xz, vec2(texCoord.x, -texCoord.z), negy);
	    cubeFace = 2.0 + negy;
   	} 
   	else 
   	{
		// z major
    	float negz = step(texCoord.z, 0.0);
    	uvCoord = mix(vec2(texCoord.x, -texCoord.y), -texCoord.xy, negz);
    	cubeFace = 4.0 + negz;
   	}

	uvCoord = (uvCoord + 1.0) * 0.5; // 0..1
	uvCoord = uvCoord * cubemapSize;
	uvCoord = clamp(uvCoord, vec2(0.0), cubemapSize - vec2(1.0));
   	return ivec3(ivec2(uvCoord), int(cubeFace));
}

void main()
{	
	ivec3 cubeCoord = ivec3(gl_GlobalInvocationID);
    vec3 worldPos = cubeCoordToWorld(cubeCoord);
    // tagent space from origin point
    vec3 normal = normalize(worldPos);
	vec3 up = vec3(0.0, 1.0, 0.0);
	vec3 right = normalize(cross(up, normal));
	up = cross(normal, right);

	vec3 irradiance = vec3(0.0);
	for(float phi = 0.0; phi < TWO_PI; phi += sampleDelta)
	{
		float sinPhi = sin(phi);
	    float cosPhi = cos(phi);
	    //float theta = 0.0;
	    for(float theta = 0.0; theta < HALF_PI; theta += sampleDelta)
	    {
	    	float sinTheta = sin(theta);
	    	float cosTheta = cos(theta);

	        // spherical to cartesian, in tangent space
	        vec3 sphereCoord = vec3(sinTheta * cosPhi,  sinTheta * sinPhi, cosTheta);
	        // tangent space to world
	        vec3 sampleVec = sphereCoord.x * right + sphereCoord.y * up + sphereCoord.z * normal; 
	        // world to cube coord
	        ivec3 sampleCoord = texCoordToCube(sampleVec);

	        irradiance += imageLoad(environmentMap, sampleCoord).rgb * cosTheta * sinTheta;
	    }
	}
	irradiance *= PI * invTotalSamples;
	
    imageStore(irradianceMap, cubeCoord, vec4(irradiance, 1.0));
}
