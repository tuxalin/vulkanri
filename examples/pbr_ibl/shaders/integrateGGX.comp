
#version 450

#include "../../resources/shaders/pbr.glsl"
#include "importanceSampleGGX.glsl"

layout(local_size_x = 16, local_size_y = 16) in;
layout(binding = 0, rgba16f) writeonly uniform image2D brfdLUT;

const uint totalSamples = 1024u;
const float invTotalSamples = 1.0 / float(totalSamples);
const float texSize = 512.0;
const float invTexSize = 1.0 / texSize;

void main() 
{
    ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);
    float dotNV = float(texCoord.x) * invTexSize;
    float roughness = float(texCoord.y) * invTexSize;

    vec3 V;
    V.x = sqrt(1.0 - dotNV * dotNV);
    V.y = 0.0;
    V.z = dotNV;

    float A = 0.0;
    float B = 0.0;
    vec3 N = vec3(0.0, 0.0, 1.0);
    for(uint i = 0u; i < totalSamples; ++i)
    {
        // generate sample vector towards the alignment of the specular lobe
        vec2 Xi = hammersleySequence(i, totalSamples);
        vec3 H  = importanceSampleGGX(Xi, N, roughness);
        float dotHV = dot(H, V);
        vec3 L  = normalize(2.0 * dotHV * H - V);

        float dotNL = max(L.z, 0.0);
        if(dotNL > 0.0)
        {
            dotHV = max(dotHV, 0.0);
            float dotNH = max(H.z, 0.0);
            // Geometric Shadowing term
            float G = g_ibl_schlickSmithGGX(dotNL, dotNV, roughness);
            float G_Vis = (G * dotHV) / (dotNH * dotNV);
            float Fc = pow(1.0 - dotHV, 5.0);

            A += (1.0 - Fc) * G_Vis;
            B += Fc * G_Vis;
        }
    }
    A *= invTotalSamples;
    B *= invTotalSamples;

    imageStore(brfdLUT, texCoord, vec4(A, B, 0.0, 0.0));
}